#!/usr/bin/env python

# This file is part of Living Labs Challenge, see http://living-labs.net.
#
# Living Labs Challenge is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Living Labs Challenge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Living Labs Challenge. If not, see <http://www.gnu.org/licenses/>.

import confargparse
import os
import sys
from werkzeug import generate_password_hash

sys.path.insert(0, os.path.abspath(os.path.join(os.path.realpath(__file__),
                                                "../..")))

import ll.core


def trycall(func, args, parser):
    try:
        func(args, parser)
    except Exception, e:
        parser.error(str(e))


def user(args, parser):
    if args.key and args.delete:
        ll.core.user.delete_user(args.key)
        return
    elif args.key:
        user = ll.core.user.get_user(args.key)
        key = args.key
    elif args.teamname and args.email and args.create:
        user = ll.core.user.new_user(args.teamname, args.email,
                                     generate_password_hash(args.password))
        key = user["_id"]
        if args.site:
            ll.core.site.set_site(key, args.short, args.name, args.url)
            print "New SITEKEY: %s" % key
        else:
            print "New PARTICIPANTKEY: %s" % key
    elif args.show:
        for user in ll.core.user.get_users():
            print user["_id"], user["teamname"], user["email"], \
            "PARTICIPANT" if user["is_participant"] else "SITE"
    else:
        parser.error("Wrong arguments.")

    if args.site and not args.create:
        ll.core.site.set_site(key, args.short, args.name, args.url)
        print "Key is now a SITEKEY: %s" % key


def status(args, parser):
    print "STATUS", args


def db(args, parser):
    if args.clear:
        ll.core.db.clear()

if __name__ == '__main__':
    def add_mongodb(parser):
        group_mongodb = parser.add_argument_group("mongodb", section="mongodb")
        group_mongodb.add_argument('--mongodb_db', default="ll", type=str,
                                   help='Mongodb database.')
        group_mongodb.add_argument('--mongodb_user', default=None, type=str,
                                   help='Mongodb user.')
        group_mongodb.add_argument('--mongodb_pw', default=None, type=str,
                                   help='Mongodb password')

    description = "Living Labs Challenge's Management"
    parser = confargparse.ConfArgParser(description=description,
                                        section="main")

    subparsers = parser.add_subparsers()

    subparser_user = subparsers.add_parser('user', section='user')
    subparser_user.add_argument('--key', type=str,
                                help='Key to identify a user (for --delete or '
                                '--site).')
    subparser_user.add_argument('--teamname', type=str,
                                help='Teamname (for --create and/or --site).')
    subparser_user.add_argument('--email', type=str,
                                help='Emailaddress (for --create and/or '
                                '--site).')
    subparser_user.add_argument('--password', type=str,
                                help='Password (for --create and/or '
                                '--site).')
    subparser_user.add_argument('--delete', action="store_true", default=False,
                                help='Delete user (key required).')
    subparser_user.add_argument('--create', action="store_true", default=False,
                                help='Create user (teamname, email address, '
                                'password required).')
    subparser_user.add_argument('--show', action="store_true", default=False,
                                help='Show users.')
    subparser_user.add_argument('--site', action="store_true", default=False,
                                help='Make a site out of this user (key or '
                                '--create and teamname, email, password '
                                'required).')
    subparser_user.add_argument('--short', type=str,
                                help='Short name for a site (only used if '
                                '--site).')
    subparser_user.add_argument('--name', type=str,
                                help="Name for a site (only used if --site).")
    subparser_user.add_argument('--url', type=str,
                                help="Url for a site (only used if --site).")
    add_mongodb(subparser_user)
    subparser_user.set_defaults(func=user, funcarg=subparser_user)

    subparser_status = subparsers.add_parser('status', section='status')
    subparser_status.add_argument("--open", action="store_true", default=False,
                                  help="")
    add_mongodb(subparser_status)
    subparser_status.set_defaults(func=status, funcarg=subparser_status)

    subparser_db = subparsers.add_parser('db', section='status')
    subparser_db.add_argument("--clear", action="store_true", default=False,
                              help="")
    add_mongodb(subparser_db)
    subparser_db.set_defaults(func=db, funcarg=subparser_db)

    args = parser.parse_args()
    ll.core.db.db.init_db(args.mongodb_db, user=args.mongodb_user,
                          password=args.mongodb_pw)

    trycall(args.func, args, args.funcarg)
