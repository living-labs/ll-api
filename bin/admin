#!/usr/bin/env python

# This file is part of Living Labs Challenge, see http://living-labs.net.
#
# Living Labs Challenge is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Living Labs Challenge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Living Labs Challenge. If not, see <http://www.gnu.org/licenses/>.

import traceback
import confargparse
import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.realpath(__file__),
                                                "../..")))

import ll.core


def trycall(func, args, parser):
    try:
        func(args, parser)
    except Exception, e:
        print traceback.format_exc()
        parser.error(str(e))


def user(args, parser):
    # Log in to database
    ll.core.db.db.init_db(args.mongodb_host, args.mongodb_port, args.mongodb_db,
                            args.mongodb_user, args.mongodb_user_pw)

    if args.remove_runs and args.key:
        ll.core.run.remove_runs_user(args.key)
        return
    elif args.remove_runs:
        print "Please supply the key of the user for which you want to remove all submitted runs."
        return

    if args.key and args.delete:
        ll.core.user.delete_user(args.key)
        return
    elif args.key:
        user = ll.core.user.get_user(args.key)
        key = args.key
    elif args.teamname and args.email and args.password and args.create:
        user = ll.core.user.new_user(args.teamname, args.email,
                                     password=args.password)
        key = user["_id"]
        if args.site:
            ll.core.site.set_site(key,
                                  args.short, args.name, args.url, args.terms)
            print "New SITEKEY: %s" % key
        else:
            print "New PARTICIPANTKEY: %s" % key
    elif args.show:
        for user in ll.core.user.get_users():
            print user["_id"], user["teamname"], user["email"], \
            "PARTICIPANT" if user["is_participant"] else "SITE", \
            "ADMIN" if "is_admin" in user and user["is_admin"] else ""
    else:
        parser.error("Wrong arguments.")

    if args.site and not args.create:
        ll.core.site.set_site(key, args.short, args.name, args.url, args.terms)
        print "Key is now a SITEKEY: %s" % key

    if args.admin and not args.create:
        ll.core.user.set_admin(key)
        print "Key is now an admin: %s" % key


def status(args, parser):
    # Log in to database
    ll.core.db.db.init_db(args.mongodb_host, args.mongodb_port, args.mongodb_db,
                            args.mongodb_user, args.mongodb_user_pw)
    print "STATUS", args


def db(args, parser):
    # Log in to database, only possible if database has already been set up
    if (not args.setup_db_users):
        ll.core.db.db.init_db(args.mongodb_host, args.mongodb_port, args.mongodb_db,
                                args.mongodb_user, args.mongodb_user_pw)
    
    # Clear database
    if args.clear:
        ll.core.db.clear()
    
    # Create DB admin
    if (args.setup_db_users and args.mongodb_db
    and args.mongodb_user and args.mongodb_user_pw
    and args.mongodb_admin and args.mongodb_admin_pw):
        ll.core.db.setup_db_users(args.mongodb_host, args.mongodb_port, args.mongodb_user, args.mongodb_user_pw,
                                    args.mongodb_db,
                                    args.mongodb_admin, args.mongodb_admin_pw)
    elif args.setup_db_users:
        print("--setup-db-users: \
            Supply a MongoDB database, user, password, admin and admin \
            password  through the commandline or via a configuration file.")
    # Import JSON
    if (args.import_json and args.mongodb_db
    and args.mongodb_user and args.mongodb_user_pw):
        ll.core.db.import_json(args.import_json, args.mongodb_host, args.mongodb_port, args.mongodb_db,
                                args.mongodb_user, args.mongodb_user_pw)
    elif args.import_json:
        print("--import-json: Supply a MongoDB database, user and password \
                    through the commandline or via a configuration file.")
    # Export JSON
    if (args.export_json and args.mongodb_db
    and args.mongodb_user and args.mongodb_user_pw):
        ll.core.db.export_json(args.export_json, args.mongodb_host, args.mongodb_port, args.mongodb_db,
                                args.mongodb_user, args.mongodb_user_pw)
    elif args.export_json:
        print("--export-json: Supply a MongoDB database, user and password \
                    through the commandline or via a configuration file.")


def trec(args, parser):
    # Log in to database
    ll.core.db.db.init_db(args.mongodb_host, args.mongodb_port, args.mongodb_db,
                            args.mongodb_user, args.mongodb_user_pw)
    
    runs, qrels, qrels_raw = ll.core.run.get_trec(args.site_id)
    os.makedirs(os.path.join(args.dir, args.site_id, "run"))
    os.makedirs(os.path.join(args.dir, args.site_id, "qrel"))
    for run in runs:
        open(os.path.join(args.dir, args.site_id,
            "run", run["name"] + ".run"),'w').write(run["trec"])
    for qrel in qrels:
        open(os.path.join(args.dir, args.site_id,
            "qrel", qrel["name"] + ".ctr.qrel"), 'w').write(qrel["trec"])
    for qrel in qrels_raw:
        open(os.path.join(args.dir, args.site_id,
            "qrel", qrel["name"] + ".raw.qrel"), 'w').write(qrel["trec"])

if __name__ == '__main__':
    def add_mongodb(parser):
        group_mongodb = parser.add_argument_group("mongodb", section="mongodb")
        group_mongodb.add_argument('--mongodb_host', default="localhost", type=str,
                        help='')
        group_mongodb.add_argument('--mongodb_port', default=27017, type=int,
                        help='')
        group_mongodb.add_argument('--mongodb_db', default="ll", type=str,
                                   help='Mongodb database.')
        group_mongodb.add_argument('--mongodb_user', default=None, type=str,
                                   help='Mongodb user.')
        group_mongodb.add_argument('--mongodb_user_pw', default=None, type=str,
                                   help='Mongodb user password')
        group_mongodb.add_argument('--mongodb_admin', default=None, type=str,
                                    conf_exclude=True,
                                    help='Mongodb administrator')
        group_mongodb.add_argument('--mongodb_admin_pw', default=None, type=str,
                                    conf_exclude=True,
                                   help='Mongodb administrator password.')

    description = "Living Labs Challenge's Management"
    parser = confargparse.ConfArgParser(description=description,
                                        section="main")

    subparsers = parser.add_subparsers()

    subparser_user = subparsers.add_parser('user', section='user')
    subparser_user.add_argument('--key', type=str,
                                help='Key to identify a user (for --delete or '
                                '--site).')
    subparser_user.add_argument('--teamname', type=str,
                                help='Teamname (for --create and/or --site).')
    subparser_user.add_argument('--email', type=str,
                                help='Emailaddress (for --create and/or '
                                '--site).')
    subparser_user.add_argument('--password', type=str,
                                help='Password (for --create and/or '
                                '--site).')
    subparser_user.add_argument('--remove-runs', action="store_true", default=False,
                                help='Removes ALL runs submitted by this user (key required).')
    subparser_user.add_argument('--delete', action="store_true", default=False,
                                help='Delete user (key required).')
    subparser_user.add_argument('--create', action="store_true", default=False,
                                help='Create user (teamname, email address, '
                                'password required).')
    subparser_user.add_argument('--show', action="store_true", default=False,
                                help='Show users.')
    subparser_user.add_argument('--site', action="store_true", default=False,
                                help='Make a site out of this user (key or '
                                '--create and teamname, email, password '
                                'required).')
    subparser_user.add_argument('--admin', action="store_true", default=False,
                                help='Make a user an admin (key or '
                                '--create and teamname, email, password '
                                'required).')
    subparser_user.add_argument('--short', type=str,
                                help='Short name for a site (only used if '
                                '--site).')
    subparser_user.add_argument('--terms', type=str,
                                help='Additional terms (only used if '
                                '--site).', default="")
    subparser_user.add_argument('--name', type=str,
                                help="Name for a site (only used if --site).")
    subparser_user.add_argument('--url', type=str,
                                help="Url for a site (only used if --site).")
    add_mongodb(subparser_user)
    subparser_user.set_defaults(func=user, funcarg=subparser_user)

    subparser_status = subparsers.add_parser('status', section='status')
    subparser_status.add_argument("--open", action="store_true", default=False,
                                  help="")
    add_mongodb(subparser_status)
    subparser_status.set_defaults(func=status, funcarg=subparser_status)

    subparser_db = subparsers.add_parser('db', section='status')
    subparser_db.add_argument("--clear", action="store_true", default=False,
                                conf_exclude=True,help="")
    subparser_db.add_argument("--setup-db-users", action="store_true",
                                conf_exclude=True,
                                help="Create standard setup of MongoDB admin \
                                and user. Needs all --mongodb_ arguments.")
    subparser_db.add_argument("--import-json", type=str, conf_exclude=True,
                              help="Import the database from json files \
                              in the given directory")
    subparser_db.add_argument("--export-json", type=str, conf_exclude=True,
                              help="Export the database as json to the given \
                              output directory")
    add_mongodb(subparser_db)
    subparser_db.set_defaults(func=db, funcarg=subparser_db)

    subparser_trec = subparsers.add_parser('trec', section='trec')
    subparser_trec.add_argument('--dir', type=str,
                                help='Directory to dump trec runs to')
    subparser_trec.add_argument('--site_id', type=str)
    add_mongodb(subparser_trec)
    subparser_trec.set_defaults(func=trec, funcarg=subparser_trec)
    args = parser.parse_args()
    
    
    trycall(args.func, args, args.funcarg)
    
