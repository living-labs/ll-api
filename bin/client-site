#!/usr/bin/env python

# This file is part of Living Labs Challenge, see http://living-labs.net.
#
# Living Labs Challenge is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Living Labs Challenge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Living Labs Challenge. If not, see <http://www.gnu.org/licenses/>.

import base64
import hashlib
import xml.etree.ElementTree as et
import argparse
import requests
import json
import random

HOST = "http://127.0.0.1:5000/api"
QUERYENDPOINT = "site/query"
DOCENDPOINT = "site/doc"
DOCLISTENDPOINT = "site/doclist"
PCLICK = {0:0.05,
          1:0.5,
          2:0.95,}
PSTOP = {0:0.2,
         1:0.5,
         2:0.9}

headers = {'content-type': 'application/json'}

def put(url, data):
    r = requests.put(url, data=data, headers=headers)
    return r.text

def store_queries(key, query_file):
    tree = et.parse(query_file)
    topics = tree.getroot()
    queries = {"queries": []}
    for topic in topics.iter("topic"):
        qid = topic.attrib["number"]
        query = topic.find("query")
        qstr = query.text
        queries["queries"].append({
            "qstr" : qstr,
            "site_qid" : hashlib.sha1(qid).hexdigest(),
        })
    url = "/".join([HOST, QUERYENDPOINT, key])
    print put(url, json.dumps(queries))

def store_doc(key, doc, site_docid):
    title = "Dummy Title"
    content = "Dummy Content"
    doc = { 
        "site_docid": site_docid,
        "title": title,
        "content": base64.b64encode(content),
        "content_encoding": "base64",
        }
    url = "/".join([HOST, DOCENDPOINT, key, site_docid])
    print put(url, json.dumps(doc))

def store_doclist(key, run_file):
    def put_doclist(doclist, current_qid):
        site_qid = hashlib.sha1(current_qid).hexdigest()
        doclist["site_qid"] = site_qid
        url = "/".join([HOST, DOCLISTENDPOINT, key, site_qid])
        return put(url, json.dumps(doclist))

    doclist = {"doclist": []}
    current_qid = None
    for line in open(run_file, "r"):
        qid, _, docid, _, _, _ = line.split()
        if current_qid != None and current_qid != qid: 
            print put_doclist(doclist, current_qid)
            doclist = {"doclist": []}
        site_docid = hashlib.sha1(docid).hexdigest()
        store_doc(key, docid, site_docid)
        doclist["doclist"].append({"site_docid": site_docid})
        current_qid = qid
    print put_doclist(doclist, current_qid)

def get_ranking(site_qid):
    pass

def store_feedback(site_qid, clicks):
    pass

def get_labels(qrel_file):
    labels = {}
    for line in open(qrel_file, "r"):
        site_qid, _, site_docid, label = line.split()
        if not site_qid in labels:
            labels[site_qid] = {}
        labels[site_qid][site_docid] = int(label)
    return labels

def get_clicks(ranking, labels):
    clicks = [0]*len(ranking)
    for site_docid in ranking:
        label = labels[site_docid]
        rand = random.random()
        if rand < PCLICK[label]:
            clicks[pos] = 1
            rand = random.random()
            if rand < PSTOP[label]:
                break
    return clicks

def simulate_clicks(key, qrel_file):
    labels = get_labels(qrel_file)
    while True:
        site_qid = random.choice(labels.keys())
        ranking = get_ranking(site_qid)
        clicks = get_clicks(ranking, labels[site_qid])
        store_feedback(site_qid, clicks)
        time.sleep(random.random())
    
if __name__ == '__main__':
    description = "Living Labs Challenge's API Server"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--key', type=str, required=True,
                        help='Provide a user key.')
    parser.add_argument('-q', '--store_queries', action="store_true",
                        default=False,
                        help='Store some queries.')
    parser.add_argument('--query_file', default="../data/queries.xml",
                        help='Path to TREC style query file.')
    parser.add_argument('-d', '--store_doclist', action="store_true", 
                        default=False,
                        help='Store a document list.')
    parser.add_argument('--run_file', default="../data/run.txt",
                        help='Path to TREC style run file.')
    parser.add_argument('-s', '--simulate_clicks', action="store_true",
                        default=False,
                        help='Simulate clicks.')
    parser.add_argument('--qrel_file', default="../data/qrel.txt",
                        help='Path to TREC style qrel file.')
    args = parser.parse_args()
    if args.store_queries:
        store_queries(args.key, args.query_file)
    if args.store_doclist:
        store_doclist(args.key, args.run_file)
    if args.simulate_clicks:
        simulate_clicks(args.key, args.qrel_file)
