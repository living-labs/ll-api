#!/usr/bin/env python

# This file is part of Living Labs Challenge, see http://living-labs.net.
#
# Living Labs Challenge is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Living Labs Challenge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Living Labs Challenge. If not, see <http://www.gnu.org/licenses/>.

import confargparse
import os
import sys
import logging
import urllib3
urllib3.disable_warnings()
import atexit

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from tornado import autoreload

sys.path.insert(0, os.path.abspath(os.path.join(os.path.realpath(__file__),
                                                "../..")))

from ll.core.db import db
from ll.api import app, cron
import ll.api.participant
import ll.api.site


if __name__ == '__main__':
    description = "Living Labs Challenge's API Server"
    parser = confargparse.ConfArgParser(description=description,
                                        section="main")
    parser.add_argument('--debug', dest='debug', action='store_true',
                        help='Enable debugging mode.')
    group_flask = parser.add_argument_group("api", section="api")
    group_flask.add_argument('--host', dest='host', default='127.0.0.1',
                        help='Host to listen on.')
    group_flask.add_argument('--port', dest='port', default=5000, type=int,
                        help='Port to listen on.')
    group_mongodb = parser.add_argument_group("mongodb", section="mongodb")
    group_mongodb.add_argument('--mongodb_db', default="ll", type=str,
                        help='')
    group_mongodb.add_argument('--mongodb_user', default=None, type=str,
                        help='')
    group_mongodb.add_argument('--mongodb_user_pw', default=None, type=str,
                        help='')
    args = parser.parse_args()

    print("Starting %s" % description)

    # Start cron job, which regularly removes old runs from the database
    cron.start()
    # Shutdown your cron thread if the web process is stopped
    atexit.register(lambda: cron.shutdown(wait=False))

    app.debug = args.debug
    db.init_db(args.mongodb_db, user=args.mongodb_user,
               password=args.mongodb_user_pw)
    http_server = HTTPServer(WSGIContainer(app))
    http_server.listen(args.port, address=args.host)
    ioloop = IOLoop.instance()
    autoreload.start(ioloop)
    ioloop.start()


